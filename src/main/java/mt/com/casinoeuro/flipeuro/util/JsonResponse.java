package mt.com.casinoeuro.flipeuro.util;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents a JSON response which is sent back to the UI on each
 * successful or unsuccessful client request. This class standardizes the output
 * sent back to the client UI. The client {@code javascript} must interpret this
 * input accordingly.
 * <p>
 * The response is divided into 4 different sections.
 * <ul>
 * <li>The list of messages which can be of three types (see {@link Message.Type} enumeration</li>
 * <li>Any data which was generated by the request</li>
 * <li>A convenience field which determines whether the JSON response is empty
 * (i.e. data is null and no messages in the list.</li>
 * <li>A convenience field which automatically determines whether the JSON response was successful,
 * based on the absence or presence of messages bearing the type of
 * {@link Message.Type#ERROR}</li>
 * </ul>
 * </p>
 *
 * @author cscib
 * @version 1.0.0
 * @since 26/05/2014 20:55
 */
public class JsonResponse {

    /**
     * A list of messages sent with the response.
     */
    private List<Message> messages;

    /**
     * The data payload pertaining to the response.
     */
    private Object data;

    /**
     * Creates and initializes a new instance of the {@link JsonResponse} class.
     */
    public JsonResponse() {
        this.messages = new ArrayList<Message>();
    }

    /**
     * Creates and initializes a new instance of the {@link JsonResponse} class with the specified
     * data.
     *
     * @param data The object representing the response data (if any).
     */
    public JsonResponse(Object data) {
        this();
        this.data = data;
    }


    /**
     * Adds a message to the response.
     *
     * @param message The {@link Message} instance to add.
     */
    public void addMessage(Message message) {
        messages.add(message);
    }

    /**
     * Adds a list of messages to the response.
     *
     * @param messages The list of {@link Message} instances to add.
     */
    public void addMessages(List<Message> messages) {
        this.messages.addAll(messages);
    }

    /**
     * Returns the list of messages contained in the response.
     *
     * @return The list of {@link Message} instances contained in the response.
     */
    public List<Message> getMessages() {
        return messages;
    }

    /**
     * Sets a new list of messages to the response.
     *
     * @param messages The new list of {@link Message} instances to be added to the response.
     */
    public void setMessages(List<Message> messages) {
        this.messages = messages;
    }

    /**
     * Determines whether this {@link JsonResponse} is empty. The response is considered empty
     * if the data payload is {@code null} and no messages are present.
     *
     * @return {@code true} if this {@link JsonResponse} is empty, otherwise {@code false} is returned.
     */
    public boolean isEmpty() {
        return (messages.isEmpty() && data == null);
    }

    /**
     * Determines whether this {@link JsonResponse} is successful. The response is considered
     * successful if no internal {@link Message} instance is of type {@link Message.Type#ERROR}.
     *
     * @return {@code true} this {@link JsonResponse} is empty, otherwise {@code false} is returned.
     */
    public boolean isSuccessful() {
        // The flag determining whether this response is successful.
        boolean successful = true;

        // We must examine all the messages in the list and
        // determine whether error messages are present.
        for (Message message : messages) {
            if (message.getType() == Message.Type.ERROR) {
                // An error message has been found, therefore this response
                // is treated as invalid.
                successful = false;
                break;
            }
        }

        return successful;
    }

    /**
     * Returns the data payload pertaining to the response.
     *
     * @return The data payload pertaining to the response.
     */
    public Object getData() {
        return data;
    }

    /**
     * Sets the new data payload pertaining to the response.
     *
     * @param data The new data payload pertaining to the response.
     */
    public void setData(Object data) {
        this.data = data;
    }

}
